library(VIM)
update_packages("rlang")
library(rlang)
#check all coloumn type
str(Data)
P<- function(X) {sum(is.na(X))/ length(X)*100}
apply(Data, 2,P)
md.pattern(Data)
md.pairs(Data)
remotes::update_packages("rlang")
md.pattern(Data)
library(mice)
impute(Data)
library(caTools)
library(abind)
library(arules)
library(arulesViz)
library(askpass)
library(assertthat)
library(backports)
library(base64enc)
library(BH)
library(bit)
library(bit64)
library(coin)
library(cli)
library(cellranger)
library(caret)
library(carData)
library(car)
library(callr)
library(broom)
library(brew)
library(blob)
library(bitops)
library(commonmark)
library(coronavirus)
library(corrplot)
library(covr)
library(cowplot)
library(crayon)
library(crosstalk)
library(curl)
library(data.tree)
library(DBI)
library(dbplyr)
library(dendextend)
library(DEoptimR)
library(desc)
library(devtools)
library(digest)
library(dplyr)
library(e1071)
library(DT)
library(ellipse)
library(ellipsis)
library(evaluate)
library(factoextra)
library(FactoMineR)
library(fansi)
library(farver)
library(flashClust)
library(forcats)
library(generics)
library(gdata)
library(gclus)
library(fs)
library(foreach)
library(httr)
library(htmlwidgets)
library(htmltools)
library(hms)
library(highr)
library(hexbin)
library(haven)
library(gtools)
library(gtable)
library(gridExtra)
library(gplots)
library(gower)
library(glue)
library(git2r)
library(gh)
library(ggsci)
library(ggrepel)
library(ggpubr)
library(ggplot2)
library(igraph)
library(ipred)
library(ini)
library(markdown)
library(maptools)
library(magrittr)
library(lubridate)
library(lmtest)
library(lme4)
library(lifecycle)
library(libcoin)
library(lazyeval)
library(lava)
library(later)
library(laeken)
library(labeling)
library(knitr)
library(jsonlite)
library(iterators)
library(pillar)
library(pbkrtest)
library(party)
library(openxlsx)
library(numDeriv)
library(nloptr)
library(multcomp)
library(munsell)
library(MatrixModels)
library(matrixStats)
library(memoise)
library(mice)
library(mime)
library(minqa)
library(ModelMetrics)
library(modelr)
impute(Data)
impute(Data [, 2:7], m= 3, seed =123)
impute <- mice(Data [, 2:7], m= 3, seed =123)
library(mice)
mice(mice(Data [, 2:7], m= 3, seed =123)
setwd("D:/R files/novel-corona-virus-2019-dataset")
CDH <- read.csv(file = "covid_19_data.csv", header = TRUE,na.strings=c("","NA"))
CDH
Data1 <- CDH
summary(CDH)
View(CDH)
#---------------------------------------------------------------------------#
#keep same date format for data set
class(Data1)
str(Data1)
LD <- as.Date(Data1$Last.Update, format=' %m %d %y')
OD<- as.Date(Data1$ObservationDate, format =' %m %d %y' )
View(LD)
Data1$ObservationDate<- as.factor(Data1$ObservationDate)
Data1$Last.Update<- as.factor(Data1$Last.Update)
summary(Data1)
View(Data1)
str(Data1)
Data1
#---------------------------------------------------------------------------#
P<- function(X)
{ sum(is.na(X))/ length(X)*100}
apply(CDH, 2,P)
library(mice)
md.pattern(CDH, size = 1)
library(mice)
md.pattern(CDH, size = 1)
install.packages(c("rstatix", "xml2"))
library(mice)
md.pattern(CDH, size = 1)
md.pattern(CDH)
md.pairs(CDH)
Data1[is.na(Data1$Province.State)]
Data1[is.na(Data1$Province.State)]
Data1$ObservationDate<- as.factor(Data1$ObservationDate)
Data1$Last.Update<- as.factor(Data1$Last.Update)
Data1[is.na(Data1$Province.State)]
Data1$Province.State<- as.character(Data1$Province.State)
Data1$Province.State[(Data1$Province.State == " ")] <- NA
Data1$Province.State[which(is.na(Data1$Province.State))]<-'other_region'
View(Data1)
summary(Data1)
#graphical representtion country vise ..
class(Data1)
Data1<- as.data.frame(Data1)
library(ggplot2)
ggplot(Data1, aes(x= Country.Region, fill = Confirmed))+ geom_bar()
summary(Data1)
ggplot(Data1, aes(x = Deaths, y =Confirmed ))+ geom_point(colour =Data1$Country.Region)
ggplot(Data1, aes(x = Deaths, y =Confirmed ))+ geom_point(colour =Data1$Country.Region)
ggplot(Data1, aes(x= Country.Region, fill = Confirmed))+ geom_boxplot()
head (ggplot(Data1, aes(x = Deaths, y = Last.Update)) + geom_point())
library(rJava)
library(iplots)
plot(Data1$Deaths,Data1$Confirmed )
plot(Data1$Deaths, Data1$Recovered)
plot(Data1$Confirmed, Data1$Recovered)
# building linear model for the COnfirmed cases vs all columns
library(caTools)
St <- sample.split(Data1$Confirmed, SplitRatio = 0.60)
Train<- subset(Data1, St == F)
Test <- subset(Data1 , St == T)
Model_conf_rec <- lm(Confirmed~Recovered, data = Train)
Model_conf_rec
summary(Model_conf_rec)
Result1 <- predict(Model_conf_rec, newdata = Test)
Result1
summary(
Result1
)
Train<- subset(Data1, St == T)
Test <- subset(Data1 , St == F)
Model_conf_rec <- lm(Confirmed~Recovered, data = Train)
Result1 <- predict(Model_conf_rec, newdata = Test)
Result1
FD1 <- table(Actual = Test$Confirmed, Predicted = Result1)
class(FD1)
FD<- as.data.frame(FD1)
FD<- as.data.frame(FD1)
FD
FD1
View(FD1)
View(Result1)
nrow(Train)
nrow(Test)
summary(Model_conf_rec)
Result1 <- predict(Model_conf_rec, newdata = Test)
Error <- FD$Actual- FD$Predicted
head(Error)
Error <- FD$Actual-FD$Predicted
class(FD)
summary(FD)
FD
Test$Confirmed
Actual <- Test$Confirmed
View(Actual)
Predicted <- RResult1
View(Predicted)
Predicted <- RResult1
Predicted <- Result1
View(Predicted)
Error <- Actual - Predicted
View(Error)
Final_Data <- cbind(Actual,Predicted, Error)
summary(FD)
Final_Data
class(Final_Data)
FD<- as.data.frame(Final_Data)
View(FD)
#-------------------------------------------------------------------------------------#
Data1
#-------------------------------------------------------------------------------------#
View(Data1)
pairs(Data1[6:8])
RMS <- sqrt(mean((FD$Error)^2))
RMS
M2 <- lm(Confirmed~Deaths+Recovered, data = Train)
M2
summary(M2)
summary(Model_conf_rec)
#p-value: < 2.2e-16
1-2.2e-16
M2
#Analysis of variance
anova(M2,full)
#Analysis of variance
anova(Model_conf_rec,M2)
Result2 <- predict(M2, newdata = Test)
View(Result2)
Act2 <- Test$Confirmed
Pred2<- Result2
Error2 <- Act2-Pred2
cbind(Act2,Pred2,Error2)->FD2
FD2
FD2 <- as.data.frame(FD2)
#root mean square
RMS2 <- sqrt(mean((FD2$Error2)^2))
RMS2
#---------------------------------------------------------------------------------------#
library(dplyr)
library(broom)
#---------------------------------------------------------------------------------------#
library(dplyr)
library(broom)
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered, color= am)) + geom_point()+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered, color= "am")) + geom_point()+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered)) + geom_point(lm)+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered)) + geom_point()+geom_smooth()
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered)) +
geom_point()+geom_smooth+geom_line(aes(y=.fitted), size = 1)+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered)) +
geom_point()+geom_smooth+geom_line(aes(y=".fitted"), size = 1)+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered)) +
geom_point()+geom_line(aes(y=.fitted), size = 1)+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered)) +
geom_point()+geom_line(aes(y=.fitted), size = 1, col = "blue")+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
#---plot via geom smooth
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered)) +geom_point()+
geom_smooth(method = "lm", se= FALSE)+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
#---plot via geom smooth
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered)) +geom_point()+
geom_smooth(method = "lm", se= FALSE)+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered)) +
geom_point()+geom_line(aes(y=.fitted), size = 1, col = "blue")+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
#---plot via geom smooth
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered)) +geom_point()+
geom_smooth(method = "lm", se= FALSE)+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
ggplot(augment(M2), aes(y =Confirmed, x = Recovered+Deaths)) +
geom_point()+geom_line(aes(y=.fitted), size = 1, col = "blue")+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
ggplot(augment(M2), aes(y =Confirmed, x = Recovered+Deaths)) +
geom_point()+geom_line(aes(y=.fitted), size = 1, col = "green")+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
ggplot(augment(M2), aes(y =Confirmed, x = Recovered+Deaths)) +
geom_point()+geom_line(aes(y=.fitted), size = 1, col = "green")+
labs(x = "Deaths and recovered", y= " Total Confirmed case", title = "Linear Regression Model")
library(plotly)
library(plot3D)
plot(M2)
Data1
plot(Model_conf_rec)
library(ggfortify)
install.packages("ggfortify")
Sample1<- sample.split(Data1$ObservationDate, SplitRatio = 0.65)
TRN <- subset(Data1, Sample1 == T)
TST <- subset(Data1, sample1 == F)
TST <- subset(Data1, Sample1 == F)
nrow(TRN)
nrow(TST)
Model1<- lm(ObservationDate~Confirmed, data = TRN)
Model1
summary(Model1)
plot(Data1$ObservationDate, Data1$Confirmed)
ggplot(Data1, aes(x=ObservationDate, y=Confirmed))+geom_smooth(method = "lm")
ggplot(Data1, aes(x=ObservationDate, y=Confirmed))+geom_smooth()+geom_point()
plot(Data1$ObservationDate, Data1$Confirmed)+geom_smooth()
ggplot(Data1, aes(x=ObservationDate, y=Confirmed))+geom_col()
plot(Data1$ObservationDate, Data1$Confirmed)+geom_col()
ggplot(Data1, aes(x=ObservationDate, y=Confirmed))
ggplot(Data1, aes(x=ObservationDate, y=Confirmed))+ geom_abline()
ggplot(Data1, aes(x=ObservationDate, y=Confirmed))+ geom_histogram()
ggplot(Data1, aes(x=ObservationDate, y=Confirmed))+ geom_histogram(bins = 300)
ggplot(Data1, aes(x=ObservationDate, y=Confirmed))+ geom_area()
ggplot(Data1, aes(x=ObservationDate, y=Confirmed))+ geom_pointrange()
plot(Data1$ObservationDate, Data1$Confirmed)+geom_col()
plot(Data1$ObservationDate, Data1$Confirmed)+geom_col() +
ggplot(Data1, aes(x=ObservationDate, y=Confirmed))+ geom_curve()
plot(Data1$ObservationDate, Data1$Confirmed)+geom_col() +
ggplot(Data1, aes(x=ObservationDate, y=Confirmed))+ geom_density()
plot(Data1$ObservationDate, Data1$Confirmed,type='l', lwd=2, col='red')
plot(Data1$ObservationDate, Data1$Confirmed,type='k', lwd=2, col='red')
plot(Data1$ObservationDate, Data1$Confirmed,type='p', lwd=2, col='red')
plot(Data1$ObservationDate, Data1$Confirmed,type='p', lwd=2, col='red')
plot(Data1$ObservationDate, Data1$Confirmed)
x <- 1:10
y <- c(2,4,6,8,7,12,14,16,18,20)
lo <- loess(y~x)
plot(x,y)
lines(predict(lo), col='red', lwd=2)
lines(predict(lo), col='red', lwd=3)
plot(Data1$ObservationDate, Data1$Confirmed, lwd=3)
plot(Data1$ObservationDate, Data1$Confirmed, lwd=1)
lines(predict(lo), col='red', lwd=3)
lines(predict(lo), col='red', lwd=3)
x <- 1:10
y <- c(2,4,6,8,7,12,14,16,18,20)
lo <- loess(y~x)
plot(x,y)
lines(predict(lo), col='red', lwd=3)
plot(Data1$ObservationDate, Data1$Confirmed, lwd=1)
lines(predict(lo), col='red', lwd=3)
plot(Data1$ObservationDate, Data1$Deaths)
plot(Data1$ObservationDate, Data1$Recovered)
plot(Data1$ObservationDate, Data1$Confirmed, lwd=1, xlab = "Confirmed",main ="COnfirmed cases")
plot(Data1$ObservationDate, Data1$Confirmed, lwd=1,ylab= "Confirmed cases" xlab = "Dates",main ="COnfirmed cases")
plot(Data1$ObservationDate, Data1$Confirmed, lwd=1,ylab= "Confirmed cases", xlab = "Dates",main ="COnfirmed cases")
plot(Data1$ObservationDate, Data1$Deaths,lwd=1,ylab= "Death cases", xlab = "Dates",main ="Death cases")
plot(Data1$ObservationDate, Data1$Recovered,lwd=1,ylab= "Recovered cases", xlab = "Dates",main ="Recovered cases")
summary(CDH)
View(CDH)
#---------------------------------------------------------------------------#
#keep same date format for data set
class(Data1)
str(Data1)
LD <- as.Date(Data1$Last.Update, format=' %m %d %y')
OD<- as.Date(Data1$ObservationDate, format =' %m %d %y' )
View(LD)
Data1$ObservationDate<- as.factor(Data1$ObservationDate)
Data1$Last.Update<- as.factor(Data1$Last.Update)
summary(Data1)
View(Data1)
str(Data1)
str(Data1)
Data1
#---------------------------------------------------------------------------#
P<- function(X)
{ sum(is.na(X))/ length(X)*100}
apply(CDH, 2,P)
library(mice)
md.pattern(CDH)
summary(Data1)
View(CDH)
summary(CDH)
Data1[is.na(Data1$Province.State)]
Data1$Province.State<- as.character(Data1$Province.State)
Data1$Province.State[(Data1$Province.State == " ")] <- NA
Data1$Province.State[which(is.na(Data1$Province.State))]<-'other_region'
View(Data1)
summary(Data1)
#graphical representtion country vise ..
class(Data1)
Data1<- as.data.frame(Data1)
library(ggplot2)
ggplot(Data1, aes(x= Country.Region, fill = Confirmed))+ geom_bar()
ggplot(Data1, aes(x = Deaths, y =Confirmed ))+ geom_point(colour =Data1$Country.Region)
ggplot(Data1, aes(x=Country.Region, fill = Deaths))+ geom_bar()
head (ggplot(Data1, aes(x = Deaths, y = Last.Update)) + geom_point())
plot(Data1$Deaths,Data1$Confirmed )
plot(Data1$Deaths, Data1$Recovered)
plot(Data1$Confirmed, Data1$Recovered)
#-------------------------------------------------------------------------------------#
View(Data1)
pairs(Data1[6:8])
# building linear model for the COnfirmed cases vs all columns
library(caTools)
St <- sample.split(Data1$Confirmed, SplitRatio = 0.60)
Train<- subset(Data1, St == T)
Test <- subset(Data1 , St == F)
nrow(Train)
nrow(Test)
St <- sample.split(Data1$Confirmed, SplitRatio = 0.60)
Train<- subset(Data1, St == T)
Test <- subset(Data1 , St == F)
nrow(Train)
nrow(Test)
Model_conf_rec <- lm(Confirmed~Recovered, data = Train)
summary(Model_conf_rec)
Result1 <- predict(Model_conf_rec, newdata = Test)
Result1
View(Result1)
FD1 <- table(Actual = Test$Confirmed, Predicted = Result1)
FD<- as.data.frame(FD1)
Error <- FD$Actual-FD$Predicted
Actual <- Test$Confirmed
Predicted <- Result1
View(Predicted)
View(Actual)
Error <- Actual - Predicted
View(Error)
Final_Data <- cbind(Actual,Predicted, Error)
Final_Data
class(Final_Data)
FD<- as.data.frame(Final_Data)
View(FD)
View(Result1)
FD1 <- table(Actual = Test$Confirmed, Predicted = Result1)
FD<- as.data.frame(FD1)
Error <- FD$Actual-FD$Predicted
Actual <- Test$Confirmed
Predicted <- Result1
View(Predicted)
Error <- Actual - Predicted
View(Error)
Final_Data <- cbind(Actual,Predicted, Error)
Final_Data
class(Final_Data)
FD<- as.data.frame(Final_Data)
View(FD)
class(Final_Data)
FD<- as.data.frame(Final_Data)
View(FD)
plot(FD$Actual, FD$Predicted)
plot(FD$Actual, FD$Predicted, col=FD$Error)
plot(FD$Actual, FD$Predicted, col=Error)
plot(FD$Actual, FD$Predicted)
plot(FD$Error)
M2 <- lm(Confirmed~Deaths+Recovered, data = Train)
M2
summary(M2)
#Analysis of variance
anova(Model_conf_rec,M2)
Result2 <- predict(M2, newdata = Test)
View(Result2)
Act2 <- Test$Confirmed
Pred2<- Result2
Error2 <- Act2-Pred2
cbind(Act2,Pred2,Error2)->FD2
FD2
FD2 <- as.data.frame(FD2)
plot(FD2$Act2,FD2$Pred2)
ggplot(FD2, aes(x= Act2, y = Pred2))+ geom_point()+ geom_smooth(method = "lm")
ggplot(FD, aes(x= Actual, y = Predicted))+ geom_point()+ geom_smooth(method = "lm")
ggplot(FD, aes(x= Actual, y = Predicted))+ geom_point()+ geom_smooth(method = "lm")+ ggtitle("Plot Linear progression model")
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered)) +
geom_point()+geom_line(aes(y=.fitted), size = 1, col = "blue")+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
#---plot via geom smooth
ggplot(augment(Model_conf_rec), aes(y =Confirmed, x = Recovered)) +geom_point()+
geom_smooth(method = "lm", se= FALSE)+
labs(x = "Total recovered cases", y= " Total Confirmed case", title = "Linear Regression Model")
ggplot(augment(M2), aes(y =Confirmed, x = Recovered+Deaths)) +
geom_point()+geom_line(aes(y=.fitted), size = 1, col = "green")+
labs(x = "Deaths and recovered", y= " Total Confirmed case", title = "Linear Regression Model")
library(plotly)
library(plot3D)
plot(M2)
plot(Data1$ObservationDate, Data1$Confirmed, lwd=1,ylab= "Confirmed cases", xlab = "Dates",main ="COnfirmed cases")
plot(Data1$ObservationDate, Data1$Deaths,lwd=1,ylab= "Death cases", xlab = "Dates",main ="Death cases")
plot(Data1$ObservationDate, Data1$Recovered,lwd=1,ylab= "Recovered cases", xlab = "Dates",main ="Recovered cases")
A<- plot(Data1$ObservationDate, Data1$Confirmed, lwd=1,ylab= "Confirmed cases", xlab = "Dates",main ="COnfirmed cases")
B<-plot(Data1$ObservationDate, Data1$Deaths,lwd=1,ylab= "Death cases", xlab = "Dates",main ="Death cases")
c<- plot(Data1$ObservationDate, Data1$Recovered,lwd=1,ylab= "Recovered cases", xlab = "Dates",main ="Recovered cases")
summary(A)
summary(B)
